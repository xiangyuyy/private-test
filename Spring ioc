一、IOC概述
Inverse Of Controll即为控制反转，简称IOC。简单来说，IOC反转了依赖关系的满足方式，由之前的自己创建依赖对象，变为由工厂推送。（变主动为被动，即反转）它解决了具有依赖关系的组件之间的强耦合，使得项目形态更加稳健
二、什么是IOC？
2.1 了解IOC思想
大概了解了IOC是控制反转，至于现在我们并不清楚它的思想和作用。那么问题来了，IOC（控制反转）是什么呢？
控制反转，简称IOC。顾名思义，它是由“控制”和“反转”两个词语组合而成。那么我们就顺藤摸瓜，分别分析一下这两个词语！
2.2 控制
控制一词，我们需要想的就很多。比如说，达成控制的条件必须是两个对象，控制可以分为谁控制谁 ，控制你做什么 。那我们一一列举这几种情况：
在Java中我们以new的方式创建对象，开发者控制控制着开发工具并间接的控制程序创建所需要的依赖对象，对于程序来说是直接的控制创建对象；如果使用IOC呢？那就可以是IOC容器直接的控制创建对象既然是IOC控制创建对象和对象生命周期，那么控制创建对象是怎么控制的呢？使用IOC创建对象是需要标签引入外部对象，这说明了IOC容器控制着创建依赖对象的入口
2.3 反转
反转一词，我们想的也很多。比如说，达成反转的条件必须是两个对象，有反转就有正转 ，然后就是反转了些什么 。那么我们也一一列举说明：
在Java中我们是间接的实用程序来创建对象，这可以看作正转。那有了IOC容器，一下子就变了，我们不用自己new对象，而是直接反转为由IOC创建生成依赖对象并存入IOC容器中使用IOC容器创建对象我们只需要通过配置来告诉它需要创建的对象是什么，并标识一下以后使用什么来获取IOC容器中创建好的对象即可（配置使用IOC的过程），这时候等你想要IOC容器中对象就直接用这个唯一标识来获取就好，而获取的过程肯定是IOC通过这个唯一标识来查找并返回给我们该对象也许有的小伙伴还是不明白反转。为什么要把IOC容器帮我们创建对象的行为叫反转呢？因为由容器帮我们查找及注入依赖对象，对象只是被动地接受依赖对象。如果不反转呢？开发者就需要创建对象，并找到、获取、使用该对象，此过程中的所有都有开发者来控制的
三、IOC的作用
通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。比如：Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。在使用了IOC之后呢？A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（xml）来指定既然由配置文件来指定创建对象关系，就大大降低了各个组件之间的强耦合并有利于维护，是项目变得更加稳健灵活
四、IOC解决Dao层和Service层的强耦合
在原始的Web开发中，Dao层和Service层是密不可分的。Dao层为数据访问层，只与数据库打交道。Servcie层为业务处理层，只处理实现相应的业务。而我们将Web开发中的Dao层和Service层串在一起，就需要在Service层new一个私有的Dao层实现对象（XxxDaoImpl）。有了IOC的思想，再想想传统的Dao层与Service层的实现就显得很不灵活，一旦修改了Dao层实现类，就必须将项目中的源码都修改掉，显然是一件非常可怕的事情。

来自 <https://baijiahao.baidu.com/s?id=1672060395403724798&wfr=spider&for=pc> 
