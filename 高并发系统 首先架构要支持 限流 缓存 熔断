服务器cpu 内存消耗 还包括tcp连接http连接的处理，网络io,文件io，jvm运行io等。综合的一个指标。

首先架构要支持   四层+7层负载均衡，保证网络可用，之后才是应用可用和优化。网络时延等

内核态的服务器能够处理的tcp请求也有瓶颈。cvs四层负载用户态，能够处理更多的tcp请求,或者F5硬件支持。

其次是考虑http层负载


限流   

计数器


最简单的实现方式 ，维护一个计数器，来一个请求计数加一，达到阈值时，直接拒绝请求。

一般实践中用 ngnix + lua + redis 这种方式，redis 存计数值


漏斗模式




流量就像进入漏斗中的水一样，而出去的水和我们系统处理的请求一样，当流量大于漏斗的流出速度，就会出现积水，水对了会溢出。

漏斗很多是用一个队列实现的，当流量过多时，队列会出现积压，队列满了，则开始拒绝请求。


令牌桶




看图例，令牌通和漏斗模式很像，主要的区别是增加了一个中间人，这个中间人按照一定的速率放入一些token，然后，处理请求时，需要先拿到token才能处理，如果桶里没有token可以获取，则不进行处理。

来自 <https://zhuanlan.zhihu.com/p/61363959> 




对并发访问进行限速

拒绝服务

最简单的方式，把多余的请求直接拒绝掉

做的高大上一些，可以根据一定的用户规则进行拒绝策略。




缓存


熔断

当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。

来自 <https://blog.csdn.net/pengjunlee/article/details/86688858> 


降级

对业务进行仔细的梳理和分析
哪些是核心流程必须保证的，哪些是可以牺牲的


什么指标下能进行降级

吞吐量、响应时间、失败次数等达到一个阈值才进行降级处理


如何降级
降级最简单的就是在业务代码中配置一个开关或者做成配置中心模式，直接在配置中心上更改配置，推送到相应的服务。

来自 <https://zhuanlan.zhihu.com/p/61363959> 






