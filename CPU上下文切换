线程数量
1. 在并发程序中，并不是启动更多的线程就能让程序最大限度地并发执行
2. 线程数量设置太小，会导致程序不能充分地利用系统资源
3. 线程数量设置太大，可能带来资源的过度竞争，导致上下文切换，带来的额外的系统开销

上下文切换
1.在单处理器时期，操作系统就能处理多线程并发任务，处理器给每个线程分配CPU时间片，线程在CPU时间片内执行任务
	• CPU时间片是CPU分配给每个线程执行的时间段，一般为几十毫秒
2.时间片决定了一个线程可以连续占用处理器运行的时长
	• 当一个线程的时间片用完，或者因自身原因被迫暂停运行，此时另一个线程会被操作系统选中来占用处理器
	• 上下文切换（Context Switch）：一个线程被暂停剥夺使用权，另一个线程被选中开始或者继续运行的过程
	• 切出：一个线程被剥夺处理器的使用权而被暂停运行
	• 切入：一个线程被选中占用处理器开始运行或者继续运行
	• 切出切入的过程中，操作系统需要保存和恢复相应的进度信息，这个进度信息就是上下文
3.上下文的内容
	• 寄存器的存储内容：CPU寄存器负责存储已经、正在和将要执行的任务
	• 程序计数器存储的指令内容：程序计数器负责存储CPU正在执行的指令位置、即将执行的下一条指令的位置
4.当CPU数量远远不止1个的情况下，操作系统将CPU轮流分配给线程任务，此时的上下文切换会变得更加频繁
	• 并且存在跨CPU的上下文切换，更加昂贵



合理的线程池大小
4. 线程池的线程数量不宜过大
5. 一旦线程池的工作线程总数超过系统所拥有的处理器数量，就会导致过多的上下文切换

来自 <https://www.cnblogs.com/sevencutekk/p/11534140.html> 



上下文切换耗时从2.7us到5.48之间。




来自 <https://zhuanlan.zhihu.com/p/79772089?utm_source=wechat_session> 

