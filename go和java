1、go性能更好，就算不考虑go的高并发特性，也比java快。不需要jvm。
2、go部署方便，编译好之后一个可执行文件就能运行，不需要安装任何环境。
3、简单，语言特性简单好学。
底层和业务层中间。

https://blog.csdn.net/damoneric_guo/article/details/114530999



其中原因在于go是一门以并发编程为特色的而设计的语言，在语法层面支持协程，也就是goroutines。而java不支持协程，只支持多线程。表面上看协程和线程似乎是同一个东西，能达到的效果也相同，但是在底层的实现上却有着非常大的区别，在服务器端的绝大部分应用中，协程要比线程节省资源的多。

线程是操作系统的资源，当java程序创建一个线程，虚拟机会向操作系统请求创建一个线程，虚拟机本身没有能力创建线程。而线程又是昂贵的系统资源，创建、切换、停止等线程属性都是重量级的系统操作，非常消耗资源，所以在java程序中每创建一个线程都需要经过深思熟虑的思考，否则很容易把系统资源消耗殆尽。

而协程，看起来和线程差不多，但创建一个协程却不用调用操作系统的功能，编程语言自身就能完成这项操作，所以协程也被称作用户态线程。我们知道无论是java还是go程序，都拥有一个主线程，这个线程不用显示编码创建，程序启动时默认就会创建。协程是可以跑在这种线程上的，你可以创建多个协程，这些协程跑在主线程上，它们和线程的关系是一对多。如果你要创建一个线程，那么你必须进行操作系统调用，创建的线程和主线程是同一种东西。显然，协程比线程要轻量的多。


Java  生态比较好。

来自 <https://zhuanlan.zhihu.com/p/104134598?utm_source=wechat_session> 

三、并发编程
3.1、CSP（MPG）并发模型介绍及对比
在Java中，通常借助于共享内存（全局变量）作为线程间通信的媒介，但在Golang中使用的是通道（channel）作为协程间通信的媒介，这也是Golang中强调的:
不要通过共享内存通信，而通过通信来共享内存

来自 <https://arong.blog.csdn.net/article/details/108930596> 


图解Go协程调度原理，小白都能理解

来自 <https://www.cnblogs.com/secondtonone1/p/11803961.html> 


