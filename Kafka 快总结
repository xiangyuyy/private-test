1.零拷贝。省去了os pagecache 到应用缓存区 应用缓存区到socket缓冲区 。os pagecache直接到网卡缓冲区。DMA技术


2.顺序写入    顺序I/O 提高了硬盘读写速度。 


Memory Mapped Files
Kafka的数据并不是实时的写入硬盘，它充分利用了现代操作系统分页存储来利用内存提高I/O效率。
Memory Mapped Files也被翻译成内存映射文件，在64位操作系统中一般可以表示20G的数据文件，它的工作原理是直接利用操作系统的Page来实现文件到物理内存的直接映射。完成映射之后你对物理内存的操作会被同步到硬盘上（操作系统在适当的时候）。
这种方法也有一个很明显的缺陷——不可靠，写到mmap中的数据并没有被真正的写到硬盘，操作系统会在程序主动调用flush的时候才把数据真正的写到硬盘。Kafka提供了一个参数——producer.type来控制是不是主动flush，如果Kafka写入到mmap之后就立即flush然后再返回Producer叫同步(sync)；写入mmap之后立即返回Producer不调用flush叫异步(async)。

来自 <https://zhuanlan.zhihu.com/p/163246737> 



3.多文件并发读写   每个分区都是一个文件，并发读写。如果topic太多 分区太多 会影响性能。

4.批量发送 节约宽带和提高效率。

百万并发支持
CP

Zookeeper  nameserverce 

Rocketmq    一个commitlog

10w的支持
AP 

均支持pull长轮询，RocketMQ消息实时性更好

RocketMQ支持异步/同步刷盘;异步/同步Replication；
Kafka使用异步刷盘方式，异步Replication。


功能更强 事务消息，定时消息，消息重试等



当broker里面的topic的partition数量过多时，kafka的性能却不如rocketMq。
kafka和rocketMq都使用文件存储，但是kafka是一个分区一个文件，当topic过多，分区的总量也会增加，kafka中存在过多的文件，当对消息刷盘时，就会出现文件竞争磁盘，出现性能的下降。一个partition（分区）一个文件，顺序读写。一个分区只能被一个消费组中的一个 消费线程进行消费，因此可以同时消费的消费端也比较少。
rocketMq所有的队列都存储在一个文件中，每个队列的存储的消息量也比较小，因此topic的增加对rocketMq的性能的影响较小。rocketMq可以存在的topic比较多，可以适应比较复杂的业务。

来自 <https://zhuanlan.zhihu.com/p/163246737> 


