1.数据库有效查询，字段精简。
2.类型的优化，能用基础类型不用包装类型。减小内存。
3.并发优化。Hashmap arrylist等不安全collection. 注意多线程不安全的变量。
4.缓存利用，redis 缓存，jvm缓存。
5.减少网络io，可以缓存相关信息。
6.异常场景处理和异常补偿机制，代码干净，高质量。
7.业务逻辑优化。If 不存在的场景直接return 减少if循环，提高代码可阅读性。
8.while 循环一定要有退出机制，异常场景也要考虑，重试多少次后跳出，不然死循环。天坑。

9.业务逻辑优化，能单查绝对不查列表。能少一个包装字段就少一个字段。
10.kafka消息能少一个字段就少一个字段，精简。减小内存。
11.分布式任务 分布式锁的应用。
12.数据库字段留合适的余量。
13.设计接口类信息 尽量用标准的类，json格式，比如L4,L7 String 类型换成数组类型[l4,l7]    map等去适配。可以减少前端的特殊化处理。
