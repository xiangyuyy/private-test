• Redis 4.0 混合持久化
新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据，如下图：

在redis重启的时候，加载 aof 文件进行恢复数据：先加载 rdb 内容再加载剩余的 aof。

来自 <https://www.cnblogs.com/chichung/p/12687101.html> 

• 




数据持久化
我们知道虽然单机的Redis虽然性能十分的出色， 单机能够扛住10w的QPS，这是得益于其基于内存的快速读写操作，那如果某个时间Redis突然挂了怎么办？我们需要一种持久化的机制，来保存内存中的数据，否则数据就会直接丢失。

Redis有两种方式来实现数据的持久化，分别是RDB（Redis Database）和AOF（Append Only File)，你可以先简单的把RDB理解为某个时刻的Redis内存中的数据快照，而AOF则是所有记录了所有修改内存数据的指令的集合（也就是Redis指令的集合），而这两种方式都会生成相应的文件落地到磁盘上，实现数据的持久化，方便下次恢复使用。





优点
RDB策略可以灵活配置周期，取决于你想要什么样的备份策略。例如：

每小时生成一次最近24小时的数据
每天生成最近一周的数据
每天生成最近一个月的数据
基于这个策略，可以快速的恢复之前某个时间段的数据。

其次，RDB非常的适合做冷备份，你可以把RDB文件存储后转移到其他的存储介质上。甚至可以做到跨云存储，例如放到OSS上的同时，又放到S3上，跨云存储让数据备份更加的健壮。

而且，基于RDB模式的恢复速度比AOF更快，因为AOF是一条一条的Redis指令，RDB则是数据最终的模样。数据量大的话所有AOF指令全部重放要比RDB更慢。

缺点
RDB作为一个数据持久化的方案是可行的，但是如果要通过RDB做到Redis的高可用，RDB就不那么合适了。

因为如果Redis此时还没有来得及将内存中的数据生成RDB文件，就先挂了，那么距离上次成功生成RDB文件时新增的这部分数据就会全部丢失，而且无法找回。

而且，如果内存的数据量很大的话，RDB即使是通过fork子进程来做的，但是也需要占用到机器的CPU资源，也可能会发生很多的也异常中断，也可能造成整个Redis停止响应几百毫秒。


https://blog.csdn.net/weixin_35775778/article/details/113489964

