


Java GC是Java的垃圾回收机制


什么时候gc

1.年轻代GC，Eden区不足了，就会触发,Ygc

2.Mixed GC不仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的老年代分区。

来自 <https://www.cnblogs.com/zhanhaitao/p/12980077.html>  
-XX:InitiatingHeapOccupancyPercent，当老年代大小占整个堆大小百分比达到该阈值时，会触发一次mixed gc.

来自 <https://www.jianshu.com/p/0f1f5adffdc1> 
Mixed GC不仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的老年代分区，它的GC步骤分为两步：
全局并发标记
拷贝存活对象

来自 <https://www.cnblogs.com/zhanhaitao/p/12980077.html> 




3.G1在堆空间分配不下的时候会产生FGC

来自 <https://www.pianshen.com/article/40181284568/> 


如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了找到连续H区，有时候不得不启动Full GC

来自 <https://www.cnblogs.com/zhanhaitao/p/12980077.html> 



Gc 什么东西

超出了作用域或引用计数为空的对象；从gc root开始搜索找不到的对象，而且经过一次标记、清理，仍然没有复活的对象。

来自 <https://www.cnblogs.com/shoshana-kong/p/10571943.html> 




Gc做了什么事情

删除不使用的对象，回收内存空间；


当发生巨型对象分配时，G1 会找出一个连续的可用分区集合，这样就能汇总出足够的内存来容纳巨型对象。***个分区别被标记为“巨型开始”（humongous start）分区，其他的分区别被标记为“巨型连续”（humongous continues）分区。如果没有足够的连续可用空间，G1 就会启动一次full GC 来压缩Java 堆空间。
巨型分区被认为是老年代的组成部分，但它们只包含一个对象。这个性质允许G1 一旦在并发标记阶段发现该对象已经不再存活，就可以尽早回收这个巨型分区。一旦发生这种情况，所有用来容纳这个巨型对象的分区都将被回收。

来自 <https://book.51cto.com/art/201703/534970.htm> 





G1的特点
	• 并发收集
	• 压缩空闲空间不会延长GC的STW时间。
	• 更容易预测GC的STW时间
	• 适用于不需要实现很高吞吐量但是需要实现很快响应时间的的场景。
并且新老年代比例，以前是1:2，而G1不需要指定，G1会跟踪每一次停顿（STW）， 根据STW动态调整，调整范围是5%-60%

来自 <https://www.pianshen.com/article/40181284568/> 

G1设计目标
1、与应用线程同时工作，几乎不需要stop the world
2、采用复制算法，不产生内存碎片
3、GC停顿可控制
4、不牺牲系统吞吐量
5、gc不要求额外的内存空间
G1收集器堆结构
heap被划分为一个一个相等的不连续的内存区域（regions），每个region都有一个分代角色：eden、surivor、old；对于每个角色的数量并没有强制的限定，也就是说堆每种分代内存的大小，可以动态变化；G1的最大特点就是高效的执行回收，优先去执行哪些大量对象可回收的区域。
G1使用了gc停顿可预测的模型，来满足用户设定的gc停顿时间，根据用户设定的目标时间，G1会自动地选择哪些region要清除，一次清除多少个region；G1从多个region中复制存活的对象，然后集中放入一个region中，同时整理、清除内存。
G1vs CMS
CMS使用标记-清除算法，G1采用复制算法，前者会产生内存碎片
对比Parallel Scavenge、Parallel Old收集器，Parallel会对整个区域整理导致gc停顿时间会较长，而G1只是特定的整理几个region
G1并非一个实时的收集器，与Parallel Scavenge一样，对gc停顿时间的设置并不绝对生效，只是G1有较高的几率保证不超过设定的gc停顿时间。与之前的gc收集器对比，G1会根据用户设定的gc停顿时间，智能评估那几个region需要被回收可以满足用户的设定

来自 <https://www.cnblogs.com/zhanhaitao/p/12980077.html> 

元空间

更新原因
　　1、字符串存在永久代中，容易出现性能问题和内存溢出。

　　2、类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。

　　3、永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。

　　4、Oracle 可能会将HotSpot 与 JRockit 合二为一。
————————————————
版权声明：本文为CSDN博主「stone_tomcat」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/stone_tomcate/article/details/101032106





